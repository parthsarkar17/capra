import "primitives/core.futil";
import "primitives/binary_operators.futil";

component main(@go go: 1) -> (@done done: 1) {

    cells {

        // Initializes memory. Stores matrices like a tensor; 
        // matrix A: nxp is "layer 1", B: pxm is "layer 2", and C is "layer 3" of 3D memory.
        // Index into memory with 32 bits.

        // Change the dimensions of each layer to be dxd, where d = max {n, p, m}!
        @external(1) mem = std_mem_d3(32, 3, 3, 3, 32, 32, 32);

        // stores value of n, m w.r.t. nxp, pxm matrix multiplication

        // Change the dimensions to reflect sizes of matrices A and B!
        n = std_const(32, 2);
        p = std_const(32, 3);
        m = std_const(32, 2);

        // compute dot products
        mul = std_mult_pipe(32);
        add = std_add(32);
        intermediate_mult = std_reg(32);
        store_dot = std_reg(32);

        // store entries from A, B, along with iterative computation of dot product
        elt_ik = std_reg(32); // k \in {1, ..., p}, i \in {1, ..., n}, j \in {1, ..., m}
        elt_kj = std_reg(32);

        // store indices of new element we want to compute
        index_i = std_reg(32);
        index_j = std_reg(32);
        index_k = std_reg(32);

        // used for conditionals... do i have to define 3?
        lt_k = std_lt(32);
        lt_j = std_lt(32);
        lt_global = std_lt(32);
    }

    wires {

        // makes the index of which row to access 0
        group put_zero_i {
            index_i.in = 32'd0;
            index_i.write_en = 1'b1;
            put_zero_i[done] = index_i.done;
        }

        // makes the index of which column to access 0
        group put_zero_j {
            index_j.in = 32'd0;
            index_j.write_en = 1'b1;
            put_zero_j[done] = index_j.done;
        }

        // makes the index of the particular element, within column j in B and row i in A, 0
        group put_zero_k {
            index_k.in = 32'd0;
            store_dot.in = 32'd0;
            index_k.write_en = 1'b1;
            store_dot.write_en = 1'b1;
            put_zero_k[done] = store_dot.done;
        }        

        // load element i, k of matrix A into relevant register
        group load_ik {
            mem.addr0 = 32'd0;
            mem.addr1 = index_i.out;
            mem.addr2 = index_k.out;
            elt_ik.in = mem.read_data;
            elt_ik.write_en = 1'b1;
            load_ik[done] = elt_ik.done;
        }

        // load element k, j of matrix B into relevant register
        group load_kj {
            mem.addr0 = 32'd1;
            mem.addr1 = index_k.out;
            mem.addr2 = index_j.out;
            elt_kj.in = mem.read_data;
            elt_kj.write_en = 1'b1;
            load_kj[done] = elt_kj.done;
        }

        // compute multiplication of elements A(i, k) and B(k, j)
        group do_mul {
            mul.left = elt_ik.out;
            mul.right = elt_kj.out;
            mul.go = !mul.done ? 1'd1;
            intermediate_mult.in = mul.out;
            intermediate_mult.write_en = mul.done;
            do_mul[done] = intermediate_mult.done;
        }

        // increments dot product by result of multiplication
        group update_dot {
            add.left = intermediate_mult.out;
            add.right = store_dot.out;
            store_dot.in = add.out;
            store_dot.write_en = 1'b1;
            update_dot[done] = store_dot.done;
        }

        // increments the register that holds k \in {1, ..., p}
        group incr_local_indx {
            add.left = 32'd1;
            add.right = index_k.out;
            index_k.in = add.out;
            index_k.write_en = 1'b1;
            incr_local_indx[done] = index_k.done;
        }

        // condition for stopping iteration to compute dot product for an element C(i, j),
        // which is k >= p
        comb group next_element {
            lt_k.left = index_k.out;
            lt_k.right = p.out;
        }

        // write to correct location in memory once dot prod is fully computed
        group store {
            mem.addr0 = 32'd2;
            mem.addr1 = index_i.out;
            mem.addr2 = index_j.out;
            mem.write_data = store_dot.out;
            mem.write_en = 1'b1;
            store[done] = mem.done;
        }

        // increments the register that holds j \in {1, ..., m}
        group incr_column_indx {
            add.left = 32'd1;
            add.right = index_j.out;
            index_j.in = add.out;
            index_j.write_en = 1'b1;
            incr_column_indx[done] = index_j.done;
        }

        // condition for starting computations of elements in the next row
        comb group next_row {
            lt_j.left = index_j.out;
            lt_j.right = m.out;
        }

        group incr_row_indx {
            add.left = 32'd1;
            add.right = index_i.out;
            index_i.in = add.out;
            index_i.write_en = 1'b1;
            incr_row_indx[done] = index_i.done;
        }

        comb group stop_computing {
            lt_global.left = index_i.out;
            lt_global.right = n.out;
        }
    }

    control {

        seq {
            // initialize registers
            par {
                put_zero_i; put_zero_j; put_zero_k;
            }

            // while we haven't exceeded the last row of matrix C, continue computing elements
            while lt_global.out with stop_computing {
                seq {
                    // while we haven't exceeded the last column of matrix C for the current row, continue computing elements
                    while lt_j.out with next_row {

                        seq {
                            // while we haven't reached the end of row A(i,:) and col B(:,j),
                            // continue updating the dot incrementer with A(i,k) * B(k,j)
                            while lt_k.out with next_element {
                                seq {
                                    load_ik;
                                    load_kj;
                                    par {
                                        do_mul; 
                                        incr_local_indx;
                                    }
                                    update_dot;
                                }
                            }
                            // finished computing dot of row A(i,:) and col B(:,j) for C(i,j)
                            par {
                                store; put_zero_k;
                            }
                            incr_column_indx;    
                        }        
                    }

                    // start computing elements at the beginning of the next row
                    par {
                        put_zero_j; incr_row_indx;
                    }
                }
            }
        }
    }
}