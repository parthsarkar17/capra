import "primitives/core.futil";
import "primitives/binary_operators.futil";

component dummy(v1: 32, v2: 32) -> (out: 32) {
    cells {
        mul = std_mult_pipe(32);
        r = std_reg(32);
    }
    wires {
        group do_mul {
            mul.left = v1;
            mul.right = v2;
            mul.go = !mul.done ? 1'd1;
            r.in = mul.out;
            r.write_en = mul.done;
            do_mul[done] = r.done;
        }
        out = r.out;
    }
    control {
        do_mul;
    }
}

component main(@go go: 1) -> (@done done: 1) {

    cells {
        @external(1) mem = std_mem_d1(32, 5, 3);
        v1 = std_reg(32);
        v2 = std_reg(32);
        multiplier = dummy();
        comp = std_reg(32);
    }

    wires {
        group read1 {
            mem.addr0 = 3'b001;
            v1.in = mem.read_data;
            v1.write_en = 1'd1;
            read1[done] = v1.done;
        }

        group read2 {
            mem.addr0 = 3'b011;
            v2.in = mem.read_data;
            v2.write_en = 1'd1;
            read2[done] = v2.done;
        }

        group do_mul {
            multiplier.v1 = v1.out;
            multiplier.v2 = v2.out;
            multiplier.go = 1'd1;
            comp.in = multiplier.out;
            comp.write_en = multiplier.done;
            do_mul[done] = comp.done;
        }

        group write {
            mem.addr0 = 3'b100;
            mem.write_data = comp.out;
            mem.write_en = 1'b1;
            write[done] = mem.done;
        }

    }

    control {
        seq {
            read1;
            read2;
            do_mul;
            write;
        }
    }
}